------------------------------------------------------
CHAPTER 1 - HTTP
------------------------------------------------------

- Tim Berners-Lee created 3 components when he defined the web:

    1. HTML
    2. HTTP
    3. URLs



- Protocol Stack

    IP = used to direct traffic through the internet
    TCP = makes connection reliable by adding stability and retransmission



- HTTP Request Overview

    1. We type 'www.google.com' into the address bar of our web browser.  Note that
         our web browser automatically changes this to 'http://www.google.com:80',
         with the protocol and port specified.

       A DNS request is sent, which returns the IP address of the site (could be IPv4
         or IPv6).  Many large sites have servers all over the world, and the server
         closest to your location is reserved.


    2. Our web browser asks our computer to open a TCP connection to the IP address
         using either Port 80 or Port 443.


    3. Once the browser has a connection to the web server, it can start asking for the
         website using the HTTP protocol.  The HTTP request is sent to the server.


    4. The website responds with the document at the URL you requested.  Typically, 
         the document is HTML.  In other cases, 301 or 404 responses might be returned.


    5. The web browser processes the returned response.  If the returned response is
         HTML, the browser starts to parse the HTML and builds the in-memory DOM.
         During this processing, the browser sees other resources (CSS, Javascript, images)
         that it needs to display the page properly.


    6. The web browser requests any additional resources it needs.  The average website
         requires 75 additional resources!


    7. When the browser has enough critical resources, it starts to render the page on
         screen.  This requires care, because you don't want to make the user wait for
         every resource before you display the page.  However, if you don't have enough
         resources, elements will be jumping around the page.


    8. After the initial display of the page, the web browser continues to download other
         resources that the page needs and updates the page as it processes them.  These
         resources include nonciritical items such as images and advertising tracking scripts.


    9. When the page is fully loaded, the browser stops the loading icon (usually in the address
        bar), and fires the 'OnLoad JavaScript' event, which JavaScript code may then use as a 
        sign that the page is ready to perform certain actions.


    10. At this point, the page is fully loaded, but the browser hasn't stopped sending out 
         requests.  Most web pages are now feature-rich applications that continually communicate
         with various servers to load additional content.



- OSI Model

    Layer 7 = Application Layer
                HTTP

    Layer 6 = Presentation Layer
                File format (ASCII, UTF-8, JPG, PNG, ...)

    Layer 5 = Session Layer
                SSL/TLS

    Layer 4 = Transport Layer
                TCP

    Layer 3 = Network Layer
                IP

    Layer 2 = Data Link Layer
                Ethernet

    Layer 1 = Physical Layer
                Cable / Wifi / Mobile



- Telnet Example

    - This is the basic syntax of an HTTP request, after you open a connection:

        GET /page.html↵


    - To illustrate, we can open a telnet session to a website, then send an HTTP
        request:

          # Create connection to server
          $ telnet www.google.com 80
      
          Trying 172.217.3.196...
          Connected to www.google.com.
          Escape character is '^]'.
      
      
          # Now, send HTTP request
          GET /
      
          HTTP/1.0 200 OK
          Date: Sun, 10 Sep 2017 16:20:09 GMT
          Expires: -1
          Cache-Control: private, max-age=0
          Content-Type: text/html; charset=ISO-8859-1
          P3P: CP="This is not a P3P policy! See
               https://www.google.com/support/accounts/answer/151657?hl=en for more info."
          Server: gws
          X-XSS-Protection: 1; mode=block
          X-Frame-Options: SAMEORIGIN
          Set-Cookie:
                NID=111=QIMb1TZHhHGXEPjUXqbHChZGCcVLFQOvmqjNcUIejUXqbHChZKtrF4Hf4x4DVjTb01R
                8DWShPlu6_aQ-AnPXgONzEoGOpapm_VOTW0Y8TWVpNap_1234567890-p2g; expires=Mon,
                12-Mar-2018 16:20:09 GMT; path=/; domain=.google.com; HttpOnly
          Accept-Ranges: none
          Vary: Accept-Encoding
          
          <!doctype html><html itemscope="" itemtype="http://schema.org/WebPage"
               lang="en"><head><meta content="Search the world's information, including
               webpages, images, videos and more. Google has many special features to help
               you find exactly what you're looking for." name="description
          
          ...etc. (Most HTML omitted)
          
          </script></div></body></html>Connection closed by foreign host.


    - As we see at the end of each example, the connection is closed.  To send another
        HTTP request, we need to reopen the connection.  To avoid this step, we can use
        HTTP/1.1 (which keeps the connection open by default).  

      Here is a HTTP/1.1 request (a second carriage return is required).

        GET / HTTP/1.1↵↵



- HTTP/0.9

    - This was the first specification, released in 1991 by Tim Berners-Lee.  There is only
        a single command, and that command is a single ASCII line.  

      Only GET requests are allowed, so all of them are expected to be idempotent.

        GET /section/page.html↵



- HTTP/1.0

    - In 1996, a new standard was gradually evolved to reflect the various changes
        other web servers had already been making.

        - HEAD and POST request methods were added
        - Adding the HTTP version number to all messages
        - HTTP headers on requests and responses
        - 3 digit response codes



- HTTP/1.0 Methods

    HEAD  =  allows the client to get all the meta information (such as HTTP headers)
               for a resource without downloading the resource itself

    POST  =  allows the client to send data back to the web server

    GET   =  data can be sent to server in query string, but this data should only be
               something that alters the results (and all GET requests should be 
               idempotent)



- HTTP/1.0 Request Headers

    - HTTP headers are provided on separate lines after the original request line.

        GET /page.html HTTP/1.0↵
        Header1: Value1↵
        Header2: Value2↵
        ↵


    - Here is a typical HTTP/1.0 GET request:

        GET /page.html HTTP/1.0↵
        Accept: text/html,application/xhtml+xml,image/jxr/,*/*↵
        Accept-Encoding: gzip, deflate, br↵
        Accept-Language: en-GB,en-US;q=0.8,en;q=0.6↵
        Connection: keep-alive↵
        Host: www.example.com↵
        User-Agent: MyAwesomeWebBrowser 1.1↵↵


       Here is a typical response:

         HTTP/1.0 200 OK
         Date: Sun, 25 Jun 2017 13:30:24 GMT
         Content-Type: text/html
         Server: Apache
         
         <!doctype html>
         <html>
         <head>
         ...etc.



- HTTP/1.0 Response Codes

    Category                Value      Description          Details
    ----------------------------------------------------------------------------------------------
    1xx (informational)     N/A        N/A                  HTTP/1.0 doesn’t define any 1xx 
                                                              status codes, but does define 
                                                              the category.

    2xx (successful)        200        OK                   This code is the standard response 
                                                              code for a successful request.

                            201        Created              This code should be returned for a 
                                                              POST request.

                            202        Accepted             The request is being processed but 
                                                              hasn’t completed processing yet.

                            204        No content           The request has been accepted and 
                                                              processed, but there’s no BODY 
                                                              response to send back.

    3xx (redirection)       300        Multiple choices     This code isn’t used directly. It 
                                                              explains that the 3xx category implies 
                                                              that the resource is available at one 
                                                              (or more) locations, and the exact response 
                                                              provides more details on where it is.

                            301        Moved permanently   The Location HTTP response header should 
                                                             provide the new URL of the resource.

                            302        Moved temporarily   The Location HTTP response header should 
                                                             provide the new URL of the resource.

                            304        Not modified        This code is used for conditional responses 
                                                             in which the BODY doesn’t need to be sent 
                                                             again.

    4xx (client error)      400        Bad request         The request couldn’t be understood and should 
                                                             be changed before resending.

                            401        Unauthorized        This code usually means that you’re not 
                                                             authenticated.

                            403        Forbidden           This code usually means that you’re 
                                                             authenticated, but your credentials don’t 
                                                             have access.

                            404        Not found           This code is probably the best-known HTTP 
                                                             status code, as it often appears on error 
                                                             pages.

    5xx (server error)      500        Internal server error   The request couldn’t be completed due to 
                                                                 a serverside error.

                            501        Not implemented     The server doesn’t recognize the request 
                                                             (such as an HTTP method that hasn’t yet been
                                                             implemented).

                            502        Bad gateway         The server is acting as a gateway or proxy and 
                                                             received an error from the downstream server.

                            503        Service unavailable     The server is unable to fulfill the request, 
                                                                 perhaps because the server is overloaded 
                                                                 or down for maintenance.



- HTTP/1.0 Response Headers

    - Response headers follow the same format as request headers:

        GET /
        HTTP/1.0 302 Found
        Location: http://www.google.ie/?gws_rd=cr&dcr=0&ei=BWe1WYrf123456qpIbwDg
        Cache-Control: private
        Content-Type: text/html; charset=UTF-8
        Date: Sun, 10 Sep 2017 16:23:33 GMT
        Server: gws
        Content-Length: 268
        X-XSS-Protection: 1; mode=block
        X-Frame-Options: SAMEORIGIN
        <HTML><HEAD><meta http-equiv="content-type" content="text/html;charset=utf-8
        ">                                                                         
            <TITLE>302 Moved</TITLE></HEAD><BODY>
                                           <H1>302 Moved</H1>
                                                             The document has moved
        <A HREF="http://www.google.ie/?gws_rd=cr&amp;dcr=0&amp;ei=BWe1WYrfIojUgAbqpI
        bwDg">here</A>.</BODY></HTML> Connection closed by foreign host.



- HTTP/1.1

    - The HTTP/1.1 standard (1997, updated in 1999 and 2014) included new features 
        such as:

        - Mandatory Host Headers
        - Persistent Connections
        - Better Caching Options
        - Chunked Encoding

      Many of the new features used HTTP headers.



- Mandatory Host Header

    - When HTTP was created, it was assumed that a web server would host only a
        single website.  Thus, the host was implied.  Nowadays, one web server may
        host many domains, so we have to tell the server which site we want with
        the 'Host' header.

      They could have required fully-qualified URLs in the request line itself, but
        there was concern that change would break a lot of existing code.

        GET / HTTP/1.1
        Host: www.google.com


    - Technically, this header is required, but many web servers will still respond
        if it's missing.  Requiring this header caused a lot of hardware and IP 
        addresses to be saved!



- Persistent Connections

    - Initially, HTTP was a single-request-and-response protocol.  The connection
        was closed after the response was received.  As the web became more media-rich,
        closing the connection after each request proved to be wasteful.

      The problem was resoleved with a new 'Connection' HTTP header.  If the value
        'Keep-Alive' was set in this header, the client is asking the server to keep
        the connection open for additional requests:

        GET /page.html HTTP/1.0
        Connection: Keep-Alive


    - The server would respond with 'Connection: Keep-Aive' if it supports persistent
        connections.

        HTTP/1.0 200 OK
        Date: Sun, 25 Jun 2017 13:30:24 GMT
        Connection: Keep-Alive
        Content-Type: text/html
        Content-Length: 12345
        Server: Apache
        
        <!doctype html>
        <html>
        <head>
        ...etc.


    - Note the client needs to know when the request is completed so that the client can
        close the connection.  The 'Content-Length' header is used for this purpose.


    - HTTP/1.1 made this setting the default, so HTTP/1.1 connections can be assumed
        to be persistent.



- Other New Features

    - HTTP/1.1 also introduced the new methods:

        PUT
        OPTIONS
        CONNECT
        TRACE
        DELETE


    - HTTP/1.1 included better caching methods. These methods allowed the server to 
        instruct the client to store the resource (such as a CSS file) in the browser’s 
        cache so it could be reused later if required. The 'Cache-Control' HTTP header 
        introduced in HTTP/1.1 had more options than the 'Expires' header from HTTP/1.0. 


    - HTTP cookies were created to allow HTTP to move from being a stateless protocol.


    - New character sets, proxy support, authentication, new status codes, and trailing
        headers were other new additions.


    - HTTP headers that aren't compeletely standardized have also been used over the years.
        Many of these begin with an 'X-' to indicate they aren't formally standardized:

        X-Content-Type
        X-Frame-Options
        X-XSS-Protection



- Introduction to HTTPS

    - HTTPS is the secure version of HTTP that encrypts messages in transit by using
        the TLS (Transport Layer Security) protocol.  This ensures that messages
        cannot be intercepted, read, or altered en route.

      TLS is often also known by its previous incarnation SSL.


    - HTTPS adds 3 important concepts to HTTP messages:

        1. Encryption
             Messages can't be read by third parties while in transit.

        2. Integrity
             The message hasn't been altered in transit, as the entire encrypted
               message is digitally signed, and that signature is cryptographically
               verified before decryption.

        3. Authentication
             The server is the one you intend to talk to.



- SSL, TLS, HTTPS, and HTTP

    - SSL was actually invented and owned by Netscape, so it was never a formal
        standard.

        SSLv1      Internal Netscape only
        SSLv2      1995
        SSLv3      1996


    - TLS is the standardized version of SSL.

        TLSv1.0    Similar to SSLv3
        TLSv1.1    2006
        TLSv1.2    2008
        TLSv1.3    2018


    - SSLv3 was the de facto standard for a long time.  However, in 2014 major
        vulnerabilities were discovered, and it is no longer supported and cannot
        be used.


    - HTTPS works by using public key encrpytion, which allows servers to provide
        public keys in the form of digital certificates when users first connect.

      Your browser encrpytes messages by using this public key, which only the
        server can decrpyt, as only it has the corresponding private key.

      This system allows you to communicate securely with a website without having
        to know a secret shared key in advance.


    - The digital certificates are issued, and digitally signed, by various CAs 
        trusted by the browser, which is why it's possible to authenticate that the 
        public key is for the server you are connecting to.


    - When the client connects to an HTTPS server, it goes through the TLS Handshake,
        in which:

        1. The server provides the public key

        2. The client and server agree on the encryption methods to use

        3. The client and server negotiate a shared encryption key to use in the future.
             This is necessary, since public key cryptography is slow, so it is only
             used to negotiate a shared secret.


      After the HTTPS session is set up, standard HTTP messages are exchanged.  The client
        and server encrypt these messages before sending and decrypt upon receipt.  



- OpenSSL

    - For web servers using HTTPS, we can't use Telnet to send HTTP requests. 
        We need a client that can understand HTTPS and do the encryption and
        decrpytion.  The OpenSSL 's_client' command can be used to do this.

        openssl s_client -crlf -connect www.google.com:443 -quiet
        GET / HTTP/1.1
        Host: www.google.com
        
        HTTP/1.1 200 OK
        ...etc.